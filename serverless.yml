# ============================================================================ #
# Core configuration                                                           #
# ============================================================================ #
frameworkVersion: "^2.0.0"
service: aptmind
useDotenv: true

# ============================================================================ #
# Plugins                                                                      #
# ============================================================================ #
plugins:
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-webpack
  - serverless-offline

# ============================================================================ #
# Cloud provider                                                               #
# ============================================================================ #
provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-2
  lambdaHashingVersion: 20201221
  # default stage to dev
  stage: ${opt:stage, 'dev'}
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "s3:ListBucket"
          Resource:
            - "arn:aws:s3:::${env:S3_HRV_BUCKET}"

# ============================================================================ #
# Package individually (optimization)                                          #
# ============================================================================ #
package:
  individually: true

# ============================================================================ #
# Custom configuration                                                         #
# ============================================================================ #
custom:
  # Prune old SLS deployments in S3 (keep latest 3)
  prune:
    automatic: true
    number: 3
  # Webpack
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: "yarn"
    packagerOptions:
      scripts:
        # Generate prisma client
        - prisma generate

# ============================================================================ #
# Lambdas                                                                      #
# ============================================================================ #
functions:
  # Main Express API
  app:
    handler: api/server.handler
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP}
      subnetIds:
        - ${env:SUBNET_ONE}
        - ${env:SUBNET_TWO}
        - ${env:SUBNET_THREE}
    events:
      - http:
          path: /
          method: ANY
          # Require API key
          private: true
          # Enable CORS (black box for default Serverless settings)
          cors:
            # For multiple origins, change `origin` to `origins`
            origin: "https://master.d5x6a89bl7jwe.amplifyapp.com"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Origin
              - X-Requested-With
              - Accept
              - Content-Range
              - Range
              - range
      - http:
          path: "{proxy+}"
          method: ANY
          # Require API key
          private: true
          # Enable CORS (black box for default Serverless settings)
          cors:
            # For multiple origins, change `origin` to `origins`
            origin: "https://master.d5x6a89bl7jwe.amplifyapp.com"
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
              - Origin
              - X-Requested-With
              - Accept
              - Content-Range
              - Range
              - range

  # Hourly: update hours since last practice for all users
  updateHoursSinceLast:
    handler: api/lambdas/hoursSinceLast.update
    timeout: 300
    events:
      - schedule: rate(1 hour)
    environment:
      API_BASE_URL: ${env:API_BASE_URL}
      API_KEY: ${env:API_KEY}

  # Reset user randomization boolean if necessary
  resetRandomization:
    handler: api/lambdas/randomization.reset
    timeout: 300
    events:
      - schedule: rate(1 minute)
    environment:
      API_BASE_URL: ${env:API_BASE_URL}
      API_KEY: ${env:API_KEY}

  #  1. randomize user inside or outside of window
  #  2. randomize (1/3 chance) into intervention type {none, app, regulatory}
  #  3. configure message details for next cycle
  randomizeUser:
    handler: api/lambdas/users.randomize
    timeout: 300
    events:
      - schedule: rate(1 minute)
    environment:
      API_BASE_URL: ${env:API_BASE_URL}
      API_KEY: ${env:API_KEY}

  # Send EMA set one notification
  sendEmaOneNotification:
    handler: api/lambdas/emaOne.push
    timeout: 300
    events:
      - schedule: rate(1 minute)
    environment:
      API_BASE_URL: ${env:API_BASE_URL}
      API_KEY: ${env:API_KEY}

  # Send intervention message
  sendMessage:
    handler: api/lambdas/message.push
    timeout: 300
    events:
      - schedule: rate(1 minute)
    environment:
      API_BASE_URL: ${env:API_BASE_URL}
      API_KEY: ${env:API_KEY}

  # Send EMA set two notification
  sendEmaTwoNotification:
    handler: api/lambdas/emaTwo.push
    timeout: 300
    events:
      - schedule: rate(1 minute)
    environment:
      API_BASE_URL: ${env:API_BASE_URL}
      API_KEY: ${env:API_KEY}

  # Daily (24h): check if watch data was logged to S3
  checkWatchData:
    handler: api/lambdas/watchData.check
    timeout: 300
    events:
      # Without Daylight Saving Time (November 7): 9:00AM UTC (3:00AM CST)
      # For Daylight Saving Time (March 14): 8:00AM UTC (3:00AM CST)
      - schedule: cron(0 9 * * ? *)
    environment:
      API_BASE_URL: ${env:API_BASE_URL}
      API_KEY: ${env:API_KEY}

# ============================================================================ #
# Resources                                                                    #
# ============================================================================ #
resources:
  # API Gateway errors
  - ${file(api/resources/apiGatewayErrors.yml)}
